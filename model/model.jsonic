

sys: shape: srv: {
  &={
    name: string
    kind: internal
    msg: {
      &={
        async: boolean
      }
    }
  }
}


main: srv: /sys/shape/srv





#####





main: ent: nodezoo: search: {
  term: type: N
  when: type: N
}

main: ent: nodezoo: github: {
  name: type: S
  owner: type: S
  repo: type: S
  stars: type: N
  forks: type: N
  last: type: N
}

main: ent: nodezoo: npm: {
  name: type: S
  version: type: S
  giturl: type: S
  desc: type: S
  readme: type: S
}

main: ent: nodezoo: pass_reset_token: {
  value: type: S
  was_used: type: N
  user_id: type: S

  #
  # TODO: Implement expiry.
  #
}

main: ent: nodezoo: orig: {
  name: type: S
  ingested_at: type: S
}

main: ent: nodezoo: bookmark: {
  name: type: S
  owner_id: type: S
}

main: ent: nodezoo: history: {
  name: type: S
  day: type: S
  npm_downloads: type: N
  gh_stars: type: N
  gh_forks: type: N
  gh_issues: type: N
}








main: srv: monitor: {
}


main: srv: payment: {
  msg: {
    'role:payment,ping:pong': {}
    'role:payment,process:payment': {}
  }
}


main: srv: web: {
  kind: external
  msg: {
    'role:web,ping:pong': {}

    'role:web,scope:public,login:with_github': {}
    'role:web,scope:public,login:user': {}
    'role:web,scope:public,register:user': {}
    'role:web,scope:public,search:pkgs': {}
    'role:web,scope:public,show:pkg': {}
    'role:web,scope:public,request:pass_reset': {}
    'role:web,scope:public,reset:pass': {}

    'role:web,scope:account,logout:user': {}
    'role:web,scope:account,load:profile': {}
    'role:web,scope:account,list:pkg_history': {}
    'role:web,scope:account,bookmark:pkg': {}
    'role:web,scope:account,remove:bookmark': {}
    'role:web,scope:account,list:bookmarks': {}
    'role:web,scope:account,is:premium': {}
  }
}


main: srv: web_public: {
  kind: external
  msg: {
    'role:web,scope:public,ping:pong': {}

    'role:web,scope:public,login:with_github': {}
    'role:web,scope:public,login:user': {}
    'role:web,scope:public,register:user': {}
    'role:web,scope:public,search:pkgs': {}
    'role:web,scope:public,show:pkg': {}
    'role:web,scope:public,request:pass_reset': {}
    'role:web,scope:public,reset:pass': {}
  }
}


main: srv: web_account: {
  kind: external
  msg: {
    'role:web,scope:account,ping:pong': {}

    'role:web,scope:account,logout:user': {}
    'role:web,scope:account,load:profile': {}
    'role:web,scope:account,list:pkg_history': {}
    'role:web,scope:account,bookmark:pkg': {}
    'role:web,scope:account,remove:bookmark': {}
    'role:web,scope:account,list:bookmarks': {}
    'role:web,scope:account,is:premium': {}
  }
}


main: srv: info: {
  msg: {
    'role:info,ping:pong': {}
    'role:info,need:part': { async: true }
    'role:info,collect:part': { async: true }
    'role:info,get:info': {}
  }
}


main: srv: npm: {
  msg: {
    'role:npm,ping:pong': {}
    'role:source,source:npm,get:package': {}
    'role:source,source:npm,pull:package': {}
  }
}


main: srv: github: {
  msg: {
    'role:github,ping:pong': {}
    'role:source,source:github,get:package': {}
    'role:source,source:github,pull:package': {}
    'role:source,source:github,get:rate_limit': {}
  }
}


main: srv: history: {
  msg: {
    'role:history,ping:pong': {}
    'role:history,pull:npm_history': {}
    'role:history,pull:github_history': {}
    'role:history,list:history': {}
  }
}


main: srv: search: {
  msg: {
    'role:search,ping:pong': {}
    'role:search,search:query': {}
  }
}



main: srv: update: {
  msg: {
    'role:update,ping:pong': {}
    'role:update,start:download': {}
    'role:update,scope:pkg,prepare:ingest': {}
    'role:update,start:follow': {}
    'role:update,start:ingest': {}
    'role:update,stop:download': {}
    'role:update,stop:follow': {}
    'role:update,stop:ingest': {}
    'role:update,process:change': {}
    'role:update,stats:ingest': {}
  }
}


main: srv: user: {
  msg: {
    'role:user,ping:pong': {}
    'role:user,scope:auth,register:user': {}
    'role:user,scope:auth,login:user': {}
    'role:user,scope:auth,logout:user': {}
    'role:user,scope:pkg,add:bookmark': {}
    'role:user,scope:pkg,remove:bookmark': {}
    'role:user,scope:pkg,list:bookmarks': {}
    'role:user,scope:pkg,load:bookmark': {}

     # TODO: change the pattern to: 'role:user,scope:account,is:premium'
     #
    'role:user,is:premium': {}

     # TODO: change the pattern to: 'role:user,scope:account,load:profile'
     #
    'role:user,load:profile': {}

     # TODO: change the pattern to: 'role:user,scope:account,join:premium'
     #
    'role:user,join:premium': {}
  }
}


main: srv: devtools: {
  #
  # WARNING: This service is intended for development purposes,
  # with the idea that the following actions will be invoked ONLY
  # in the dev env via Seneca REPL.
  #
  # Please do __not__ ever expose any of these actions to the
  # outside world.
  #

  sns_topic: false,

  msg: {
    'role:devtools,ping:pong': {}
    'role:devtools,fake:true,create:pkg_history': {}
    'role:devtools,fake:true,create:npm_pkg': {}
    'role:devtools,create:user': {}
  }
}


main: srv: @"srv.jsonic"


# QUESTION: Do we need this config?
#
main: api: http: {
  prefix: '/api'
  route: {
    query: {
      path: '/query'
      msg: {role:search,cmd:query,query:'req.query.q'} 
    }
  }
}



main: theme: light: color: {
  bg0: 'FFFFFF'
  bg1: 'CCCCCC'
  fg0: '333333'
  fg1: '000000'
}

main: theme: dark: color: {
  bg0: '000000'
  bg1: '333333'
  fg0: 'CCCCCC'
  fg1: 'FFFFFF'
}


main: app: web: parts: {
  head: {}
  main: {}
}

main: app: web: view: {
  intro: {}
  result: {}
  info: {}
}



main: app: web: route: {
  home: {
    path: '/'
    view: intro
  }
  
  package: {
    path: '/info/:package'
    view: info
  }
}

